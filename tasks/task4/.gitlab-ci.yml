stages:
  - build
  - test
  - deploy
  - tag

variables:
  IMAGE_TAG: latest
  IMAGE_NAME: booking-service
  BUILD_CONTEXT: booking-service
  HELM_CHART: helm/booking-service
  HELM_RELEASE: booking-service

build:
  stage: build
  script:
    - export IMAGE_NAME=${IMAGE_NAME:-booking-service}
    - export IMAGE_TAG=${IMAGE_TAG:-latest}
    - export BUILD_CONTEXT=${BUILD_CONTEXT:-booking-service}
    - echo "Building Docker image..."
    - cd $BUILD_CONTEXT
    - echo "Build context directory..."
    - docker build -t $IMAGE_NAME:$IMAGE_TAG .
    - docker images | grep $IMAGE_NAME
    - cd ..

test:
  stage: test
  script:
    - export IMAGE_NAME=${IMAGE_NAME:-booking-service}
    - export IMAGE_TAG=${IMAGE_TAG:-latest}
    - echo "Cleaning up any existing test containers..."
    - docker stop $IMAGE_NAME-test 2>/dev/null || true 
    - docker rm $IMAGE_NAME-test 2>/dev/null || true 
    - echo "Starting container for testing..."
    - docker run -d --name $IMAGE_NAME-test -p 8080:8080 $IMAGE_NAME:$IMAGE_TAG
    - echo "Waiting for service to start..."
    - sleep 5
    - echo "Testing health endpoint..."
    - docker exec $IMAGE_NAME-test curl -f http://localhost:8080/health || exit 1
    - echo "Testing ready endpoint..."
    - docker exec $IMAGE_NAME-test curl -f http://localhost:8080/ready || exit 1
    - echo "All tests passed!"
  after_script:
    - export IMAGE_NAME=${IMAGE_NAME:-booking-service}
    - echo "Cleaning up test container..."
    - docker stop $IMAGE_NAME-test 2>/dev/null || true
    - docker rm $IMAGE_NAME-test 2>/dev/null || true 

deploy:
  stage: deploy
  # For real GitLab CI with k8s cluster:
  # image:
  #   name: alpine/helm:latest
  #   entrypoint: [""]
  
  # For gitlab-ci-local with local minikube:
  # Comment out image above and run with: gitlab-ci-local --shell-executor-no-image
  
  script:
    - export IMAGE_NAME=${IMAGE_NAME:-booking-service}
    - export IMAGE_TAG=${IMAGE_TAG:-latest}
    - export HELM_RELEASE=${HELM_RELEASE:-booking-service}
    - export HELM_CHART=${HELM_CHART:-helm/booking-service}
    - echo "Using direct path to helm..."
    - export HELM_BIN="/c/ProgramData/chocolatey/bin/helm.exe"
    - export KUBECTL_BIN="/c/ProgramData/chocolatey/bin/kubectl.exe"
    - export MINIKUBE_BIN="/c/ProgramData/chocolatey/bin/minikube.exe"
    - echo "Loading image to minikube..."
    - $MINIKUBE_BIN image load $IMAGE_NAME:$IMAGE_TAG || echo "Skipping image load"
    - echo "Deploying with Helm..."
    - $HELM_BIN upgrade --install $HELM_RELEASE $HELM_CHART --set image.tag=$IMAGE_TAG
    - echo "Waiting for deployment to be ready..."
    - $KUBECTL_BIN rollout status deployment/$HELM_RELEASE --timeout=120s || true
    - echo "Deployment successful!"
    - $KUBECTL_BIN get all -l app=$HELM_RELEASE
  only:
    - main
    - master

tag:
  stage: tag
  script:
    - echo "Creating git tag for successful build..."
    - export BUILD_TAG="build-$(date +%Y%m%d-%H%M%S)"
    - git config user.email "ci@gitlab.com"
    - git config user.name "GitLab CI"
    - git tag -a ${BUILD_TAG} -m "Build completed successfully at $(date)"
    - git push origin ${BUILD_TAG}
    - echo "Created git tag"
  only:
    - main
    - master